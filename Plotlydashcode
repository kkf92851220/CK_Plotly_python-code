# Import required libraries
import pandas as pd
import plotly.graph_objects as go
import dash
from dash import html 
from dash import dcc 
from dash.dependencies import Input, Output
import plotly.express as px 

# Create a dash application
app = dash.Dash(__name__)

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create an app layout
app.layout = html.Div(children=[
    html.H1('SpaceX Launch Records Dashboard',
            style={'textAlign': 'center', 'color': '#503D36', 'font-size': 40}),
    
    # TASK 1: Dropdown for Launch Site selection
dcc.Dropdown(
    id='site-dropdown',
    options=[
        {'label': 'ALL', 'value': 'ALL'},
        {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
        {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
        {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
        {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},
        ],
    value='ALL',
    placeholder="Select a Launch Site here",
    searchable=True
),
html.Br(),
# TASK 2: Pie chart for success count
html.Div(dcc.Graph(id='success-pie-chart')),
html.Br(),
# TASK 3:Add a Range Slider to Select Payload
html.P("Payload range (Kg):"),
dcc.RangeSlider(
    id='payload-slider',
    min=0, 
    max=10000, 
    step=1000,
    marks={0: '0 (Kg)', 2500: '2500 (Kg)', 5000: '5000 (Kg)', 7500: '7500 (Kg)', 10000: '10000 (Kg)'},
    value=[min_payload, max_payload]
    ),

# TASK 4: Add a callback function to render the scatter chart to show the correlation between payload and launch success
html.Div(dcc.Graph(id='success-payload-scatter-chart')),         
                    
])
# Function decorator to specify function input and output
@app.callback(Output(component_id='success-pie-chart', component_property='figure'),
              Input(component_id='site-dropdown', component_property='value'))
def get_pie_chart(entered_site):
    filtered_df = spacex_df
    if entered_site == 'ALL':
        fig = px.pie(spacex_df, values='class', names='Launch Site',
        title = 'Total Successful Launches by Site')
        return fig
    else:
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site].groupby(['Launch Site', 'class']).size().reset_index(name='class count')
        fig = px.pie(filtered_df, values='class count', names='class',
        title=f'Total Successful Launches for Site {entered_site}')
    return fig
        # return the outcomes piechart for a selected site

#TASK 4: Add a callback function to render the success-payload-scatter-chart scatter plot
@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
[Input(component_id='site-dropdown', component_property='value'), Input(component_id="payload-slider", component_property="value")])

def get_scatter_chart(entered_site,payload_range):
    low, high = payload_range
    masks = (spacex_df['Payload Mass (kg)']>low) & (spacex_df['Payload Mass (kg)']<high)
    filtered_df = spacex_df[masks]
    if entered_site=='ALL':
        fig = px.scatter(filtered_df,
        x='Payload Mass (kg)',
        y='class',
        color="Booster Version Category",
        title='Payload vs Launch Outcome for all sites:')
    else:
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        fig = px.scatter(filtered_df, 
                         x='Payload Mass (kg)',
                         y='class',
                         color="Booster Version Category",
                         title=f'Payload vs Launch Outcome for {entered_site}:')
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server()

